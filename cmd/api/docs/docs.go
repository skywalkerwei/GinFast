// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/login": {
            "post": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "获取token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "手机号码",
                        "name": "mobile",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "验证码",
                        "name": "code",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"code\":200,\"data\":{},\"msg\":\"ok\"}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/eth/crateNft": {
            "post": {
                "tags": [
                    "Eth"
                ],
                "summary": "生成NFT",
                "parameters": [
                    {
                        "type": "string",
                        "description": "tokenUrl",
                        "name": "tokenUrl",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"code\":200,\"data\":{},\"msg\":\"ok\"}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/eth/createTokenByUser": {
            "post": {
                "tags": [
                    "Eth"
                ],
                "summary": "用户创建NFT",
                "parameters": [
                    {
                        "type": "string",
                        "description": "privateKey",
                        "name": "privateKey",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tokenUrl",
                        "name": "tokenUrl",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"code\":200,\"data\":{},\"msg\":\"ok\"}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/eth/setTokenURI": {
            "post": {
                "tags": [
                    "Eth"
                ],
                "summary": "设置meta信息",
                "parameters": [
                    {
                        "type": "string",
                        "description": "tokenId",
                        "name": "tokenId",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tokenUrl",
                        "name": "tokenUrl",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"code\":200,\"data\":{},\"msg\":\"ok\"}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/eth/tokenURI": {
            "get": {
                "tags": [
                    "Eth"
                ],
                "summary": "meta信息",
                "parameters": [
                    {
                        "type": "string",
                        "description": "tokenId",
                        "name": "tokenId",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"code\":200,\"data\":{},\"msg\":\"ok\"}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/eth/totalSupply": {
            "get": {
                "tags": [
                    "Eth"
                ],
                "summary": "总数",
                "responses": {
                    "200": {
                        "description": "{\"code\":200,\"data\":{},\"msg\":\"ok\"}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/eth/transferEth": {
            "post": {
                "tags": [
                    "Eth"
                ],
                "summary": "转移eth",
                "parameters": [
                    {
                        "type": "string",
                        "description": "toAddress",
                        "name": "toAddress",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "amount",
                        "name": "amount",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"code\":200,\"data\":{},\"msg\":\"ok\"}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/eth/transferFrom": {
            "post": {
                "tags": [
                    "Eth"
                ],
                "summary": "转移nft",
                "parameters": [
                    {
                        "type": "string",
                        "description": "from",
                        "name": "from",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "to",
                        "name": "to",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tokenId",
                        "name": "tokenId",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"code\":200,\"data\":{},\"msg\":\"ok\"}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/eth/transferFromByUser": {
            "post": {
                "tags": [
                    "Eth"
                ],
                "summary": "用户转移nft",
                "parameters": [
                    {
                        "type": "string",
                        "description": "fromPrivateKey",
                        "name": "fromPrivateKey",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "to",
                        "name": "to",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tokenId",
                        "name": "tokenId",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"code\":200,\"data\":{},\"msg\":\"ok\"}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/eth/wallet": {
            "get": {
                "tags": [
                    "Eth"
                ],
                "summary": "生成钱包",
                "responses": {
                    "200": {
                        "description": "{\"code\":200,\"data\":{},\"msg\":\"ok\"}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/tool/send_code": {
            "post": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "工具"
                ],
                "summary": "发送验证码",
                "parameters": [
                    {
                        "type": "string",
                        "description": "mobile",
                        "name": "mobile",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"code\":200,\"data\":{},\"msg\":\"ok\"}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "0.0.1",
	Host:        "",
	BasePath:    "/api",
	Schemes:     []string{},
	Title:       "Kyle API",
	Description: "kyle api 文档",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register("swagger", &s{})
}
