upstream  fast_list {
    # 设置负载均衡模式为ip算法模式，这样不同的客户端每次请求都会与第一次建立对话的后端服务器进行交互
    ip_hash;
    server  php:6001;
}

server{
    #监听端口
    listen 80  ; 
      # listen 443 ssl;
    #  站点域名，没有的话，写项目名称即可
    server_name     api.dev.com ;  
    root            /www/GinDemo/public ;
    index           index.htm  index.html ;   
    charset         utf-8 ;

    # 配置 https 证书
          # ssl_certificate      gins.crt;   # 实际配置建议您指证书的绝对路径
          # ssl_certificate_key  gins.key;   # gins.crt 、gins.key 需要向云服务器厂商申请，后续有介绍
          # ssl_session_timeout  5m;
          # ssl_protocols TLSv1 TLSv1.1 TLSv1.2 SSLv2 SSLv3;
          # ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;
          # ssl_prefer_server_ciphers on;

    
    # 使用 nginx 直接接管静态资源目录
    # 由于  把路由(public)地址绑定到了同名称的目录 public ，所以我们就用 nginx 接管这个资源路由
    location ~  /public/(.*)  {
        # 使用我们已经定义好的 root 目录，然后截取用户请求时，public 后面的所有地址，直接响应资源，不存在就返回404
        try_files  /$1   =404;
     }

    
     location ~ / {
         # 静态资源、目录交给ngixn本身处理，动态路由请求执行后续的代理代码
         try_files $uri $uri/  @fast;
     }
    location   @fast {

        #将客户端的ip和头域信息一并转发到后端服务器  
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # 转发Cookie，设置 SameSite
        proxy_cookie_path / "/; secure; HttpOnly; SameSite=strict";

        # 最后，执行代理访问真实服务器
        proxy_pass http://fast_list   ;
    
    }
     # 以下是静态资源缓存配置
     location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$
     {
         expires      30d;
     }

     location ~ .*\.(js|css)?$
     {
         expires      12h;
     }

     location ~ /\.
     {
         deny all;
     }
}